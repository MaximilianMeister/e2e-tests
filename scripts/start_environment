#!/usr/bin/env bash

# When CAASP_DEVENV_BRANCH, SALT_BRANCH or VELUM_BRANCH environment variables
# are defined, they are used as the branch to pull from caasp-devenv, salt
# and velum upstream repositories accordingly. If they are not defined we
# use "master" by default.

SCRIPT_DIR="$(dirname $0)"
source $SCRIPT_DIR/common

if [ -z "${CAASP_DEVENV_BRANCH+x}" ]; then
  caasp_devenv_branch=master
else
  caasp_devenv_branch=$CAASP_DEVENV_BRANCH
fi

if [ -z "${SALT_BRANCH+x}" ]; then
  salt_branch=master
else
  salt_branch=$SALT_BRANCH
fi

if [ -z "${VELUM_BRANCH+x}" ]; then
  velum_branch=master
else
  velum_branch=$VELUM_BRANCH
fi

if [ -z "${CONTAINER_MANIFESTS_BRANCH+x}" ]; then
  container_manifests_branch=master
else
  container_manifests_branch=$CONTAINER_MANIFESTS_BRANCH
fi

fetch_repo 'https://github.com/kubic-project/caasp-devenv.git' $caasp_devenv_branch $CAASP_DEVENV_DIR
fetch_repo 'https://github.com/kubic-project/salt.git' $salt_branch $SALT_DIR
fetch_repo 'https://github.com/kubic-project/velum.git' $velum_branch $VELUM_DIR
fetch_repo 'https://github.com/kubic-project/caasp-container-manifests' $container_manifests_branch $CONTAINER_MANIFESTS_DIR

# cleanup all old environment states from the last run
$SCRIPT_DIR/cleanup_environment

# Spawn the velum "development" environment (dashboard, salt-master,
# salt-api, ca, etcd)
cd $CAASP_DEVENV_DIR
# Daemonize this and loop until its ready
STAGING=devel VELUM_DIR=$VELUM_DIR CONTAINER_MANIFESTS_DIR=$CONTAINER_MANIFESTS_DIR SALT_DIR=$SALT_DIR ./start --non-interactive &
cd $ROOT_DIR

# Wait until the dashboard is up and running
until $(curl -k -s https://localhost/ | grep -q "Log in")
do
  log "Waiting for velum to start"
  sleep 5
done

# Wait until even processor is up and running
started=false
until $started
do
  log "Waiting for event processor to start"

  event_processor_id=$(docker ps | grep event-processor | awk '{print $1}')
  if [ -z $event_processor_id ]
  then
    sleep 5
    continue
  fi

  # found container. Lets see if it is running UPDATE queries (or else failing).
  if docker logs $event_processor_id | grep UPDATE
  then
    started=true
  else
    sleep 5
    continue
  fi
done

# Stop the kubelet when containers are up and running
# or else we won't be able to launch another instance with the next script
# invocation.
$SCRIPT_DIR/stop_kubelet

exit 0;
