#!/usr/bin/env bash

SCRIPT_DIR="$(dirname $0)"
source $SCRIPT_DIR/common

if [ -d "$TERRAFORM_DIR" ]; then
  cd $TERRAFORM_DIR
  FORCE=true timeout 3m contrib/libvirt/k8s-libvirt.sh destroy
fi

# Manual cleanup (because sometimes the above leaves garbage behind)
sudo -v # Get sudo access

# Remove domains
sudo virsh list --all | tail -n +3 | grep e2e_tests | awk '{print $2}' | while read domain
do
  if [[ ! -z "${domain//}" ]]
  then
    log "Cleaning up domain: "$domain
    sudo virsh destroy $domain
    sudo virsh undefine $domain
  fi
done

# Remove volumes
sudo virsh vol-list default | tail -n +3 | grep e2e_tests | awk '{print $2}' | while read volume
do
  if [[ ! -z "${volume//}" ]]
  then
    log "Cleaning up volume: "$volume
    sudo virsh vol-delete $volume
  fi
done

# Remove networks
sudo virsh net-list --all | tail -n +3 | grep e2e_tests | awk '{print $1}' | while read network
do
  if [[ ! -z "${network//}" ]] && [ $network != "default" ]
  then
    log "Cleaning up volume: "$network
    sudo virsh net-destroy $network
    sudo virsh net-undefine $network
  fi
done

# remove network bridges if they have not been cleaned up for some reason (aka terraform)
for bridge in $(virsh net-info e2e_testsnet 2>/dev/null | grep Bridge | awk '{print $2}'); do
  sudo ifconfig down $bridge || :
  sudo brctl delbr $bridge || :
done

# Remove generated tf and tfstate files
rm -f terraform.tfstate
rm -f terraform.tfstate.backup
rm -f k8s-setup.tf
